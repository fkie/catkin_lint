From 3b1caa9ecbd4431b5ba91cf7c40fc2e6bb9e586d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timo=20R=C3=B6hling?= <timo.roehling@fkie.fraunhofer.de>
Date: Wed, 17 Jun 2020 16:10:02 +0200
Subject: [PATCH] Keep backwards compatibility for catkin_pkg < 0.4.1

---
 src/catkin_lint/checks/manifest.py | 14 +++++++-------
 src/catkin_lint/environment.py     |  3 ++-
 src/catkin_lint/util.py            |  6 ++++++
 test/helper.py                     |  6 ++++--
 test/test_checks_manifest.py       |  1 +
 test/test_util.py                  | 13 +++++++++++++
 6 files changed, 33 insertions(+), 10 deletions(-)

--- a/src/catkin_lint/checks/manifest.py
+++ b/src/catkin_lint/checks/manifest.py
@@ -33,28 +33,28 @@
 from lxml import etree as ET
 from ..linter import ERROR, WARNING, NOTICE
 from ..cmake import argparse as cmake_argparse
-from ..util import enumerate_package_files
+from ..util import enumerate_package_files, is_active_depend
 from .misc import project
 
 
 def depends(linter):
     def on_init(info):
-        info.buildtool_dep = {dep.name for dep in info.manifest.buildtool_depends if dep.evaluated_condition}
-        info.build_dep = {dep.name for dep in info.manifest.build_depends if dep.evaluated_condition}
+        info.buildtool_dep = {dep.name for dep in info.manifest.buildtool_depends if is_active_depend(dep)}
+        info.build_dep = {dep.name for dep in info.manifest.build_depends if is_active_depend(dep)}
         info.export_dep = set()
         info.exec_dep = set()
         if info.manifest.package_format > 1:
-            deps = {dep.name for dep in info.manifest.build_export_depends if dep.evaluated_condition}
+            deps = {dep.name for dep in info.manifest.build_export_depends if is_active_depend(dep)}
             info.export_dep.update(deps)
-            deps = {dep.name for dep in info.manifest.buildtool_export_depends if dep.evaluated_condition}
+            deps = {dep.name for dep in info.manifest.buildtool_export_depends if is_active_depend(dep)}
             info.export_dep.update(deps)
-            deps = {dep.name for dep in info.manifest.exec_depends if dep.evaluated_condition}
+            deps = {dep.name for dep in info.manifest.exec_depends if is_active_depend(dep)}
             info.exec_dep.update(deps)
         if info.manifest.package_format < 2:
             deps = {dep.name for dep in info.manifest.run_depends}
             info.export_dep.update(deps)
             info.exec_dep.update(deps)
-        info.test_dep = {dep.name for dep in info.manifest.test_depends if dep.evaluated_condition}
+        info.test_dep = {dep.name for dep in info.manifest.test_depends if is_active_depend(dep)}
         if info.env.ok:
             for pkg in info.buildtool_dep | info.build_dep | info.export_dep | info.exec_dep | info.test_dep:
                 if not info.env.is_known_pkg(pkg):
--- a/src/catkin_lint/environment.py
+++ b/src/catkin_lint/environment.py
@@ -95,7 +95,8 @@
     if cache_updated:
         _store_cache()
     for package in packages.values():
-        package.evaluate_conditions(os.environ)
+        if hasattr(package, "evaluate_conditions"):
+            package.evaluate_conditions(os.environ)
     return packages
 
 
--- a/src/catkin_lint/util.py
+++ b/src/catkin_lint/util.py
@@ -77,6 +77,12 @@
     return True
 
 
+def is_active_depend(d):
+    if hasattr(d, "evaluated_condition"):
+        return d.evaluated_condition
+    return True
+
+
 def enumerate_package_files(rootdir, catkin_ignore=True, ignore_dot=True, ignore_unimportant=True):
     for dirpath, dirnames, filenames in os.walk(rootdir, topdown=True):
         if "CATKIN_IGNORE" in filenames and catkin_ignore:
--- a/test/helper.py
+++ b/test/helper.py
@@ -85,7 +85,8 @@
         test_depends=[Dependency(d) for d in test_depends],
         exports=[Export("metapackage")] if meta else []
     )
-    package.evaluate_conditions({})
+    if hasattr(package, "evaluate_conditions"):
+        package.evaluate_conditions({})
     return package
 
 
@@ -105,7 +106,8 @@
         test_depends=[Dependency(d) for d in test_depends],
         exports=[Export("metapackage")] if meta else []
     )
-    package.evaluate_conditions({})
+    if hasattr(package, "evaluate_conditions"):
+        package.evaluate_conditions({})
     return package
 
 
--- a/test/test_checks_manifest.py
+++ b/test/test_checks_manifest.py
@@ -203,6 +203,7 @@
         result = mock_lint(env, pkg, "", checks=cc.package_description)
         self.assertEqual([], result)
 
+    @unittest.skipUnless(hasattr(Package, "evaluate_conditions"), "catkin_pkg module is too old")
     def test_evaluate_conditions(self):
         """Test if dependency conditions are properly evaluated"""
 
--- a/test/test_util.py
+++ b/test/test_util.py
@@ -45,6 +45,10 @@
         f.write("catkin_lint")
 
 
+class Object(object):
+    pass
+
+
 class UtilTest(unittest.TestCase):
     def test_word_split(self):
         """Test word_split() utility function"""
@@ -74,6 +78,15 @@
         self.assertFalse(util.is_sorted(["a", "c", "b", "d"]))
         self.assertFalse(util.is_sorted(["a", "b", "d", "c"]))
 
+    def test_is_active_depend(self):
+        """Test is_active_depend() utility function"""
+        m = Object()
+        self.assertTrue(util.is_active_depend(m))
+        setattr(m, "evaluated_condition", False)
+        self.assertFalse(util.is_active_depend(m))
+        setattr(m, "evaluated_condition", True)
+        self.assertTrue(util.is_active_depend(m))
+
     def test_write_atomic(self):
         """Test write_atomic() utility function"""
         tmpdir = tempfile.mkdtemp()
