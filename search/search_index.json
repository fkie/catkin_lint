{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"catkin_lint catkin_lint checks package configurations for the catkin build system of ROS . It runs a static analysis of the package.xml and CMakeLists.txt files in your package, and it will detect and report a number of common problems. Running If catkin_lint is invoked with one or more paths as parameters, it searches for packages recursively and checks all of them. Subfolders which contain a CATKIN_IGNORE marker file will be skipped. For a more detailed list of available command line arguments and configuration options, see the Usage section of this manual. Limitations catkin_lint works by emulating the way CMake processes your package during a build. However, since it does not really build anything, the emulation is not perfect. For instance, catkin_lint does not evaluate boolean expressions in if() clauses There is some special purpose code to detect if(CATKIN_ENABLE_TESTING) blocks, but in general, catkin_lint will just execute all statements, even mutually exclusive if() / else() blocks. catkin_lint uses mock values for find_package() , find_file() , and find_library() calls. That means that those function calls will always succeed and \"find\" something. catkin_lint ignores function() definitions. It does, however, expand macros and foreach() loops. Diagnostic Levels catkin_lint has messages in three different categories: errors, warnings, and notices. The -W option controls which problems are reported to the user: -W0 : only errors are reported -W1 : errors and warnings are reported (this is the default) -W2 : errors, warnings, and notices are reported Normally, catkin_lint returns a non-zero exit code if and only if errors occurred. The --strict option causes catkin_lint to treat any reported problem as error. You can also customize the category for particular diagnostics with --error ID , --warning ID , or --notice ID . You can also ignore messages entirely with --ignore ID . Errors Errors are severe enough to break the build and/or produce unintended side effects. Usually, they violate the rules outlined in the catkin manual . Warnings Potential errors which may indicate a bug in your package but may be justified for reasons catkin_lint cannot discern. Constructs which trigger a warning can usually be modified in a way that is functionally equivalent but more robust. Notices Issues which are not objectionable from a technical view point but should be addressed to improve the quality of the package. Many notices highlight violations of the recommendations and best practises from the catkin manual. CI Integration catkin_lint is available as optional test feature in the ROS Industrial CI and the ROS MoveIt Continuous Integration scripts.","title":"Overview"},{"location":"#catkin_lint","text":"catkin_lint checks package configurations for the catkin build system of ROS . It runs a static analysis of the package.xml and CMakeLists.txt files in your package, and it will detect and report a number of common problems.","title":"catkin_lint"},{"location":"#running","text":"If catkin_lint is invoked with one or more paths as parameters, it searches for packages recursively and checks all of them. Subfolders which contain a CATKIN_IGNORE marker file will be skipped. For a more detailed list of available command line arguments and configuration options, see the Usage section of this manual.","title":"Running"},{"location":"#limitations","text":"catkin_lint works by emulating the way CMake processes your package during a build. However, since it does not really build anything, the emulation is not perfect. For instance, catkin_lint does not evaluate boolean expressions in if() clauses There is some special purpose code to detect if(CATKIN_ENABLE_TESTING) blocks, but in general, catkin_lint will just execute all statements, even mutually exclusive if() / else() blocks. catkin_lint uses mock values for find_package() , find_file() , and find_library() calls. That means that those function calls will always succeed and \"find\" something. catkin_lint ignores function() definitions. It does, however, expand macros and foreach() loops.","title":"Limitations"},{"location":"#diagnostic-levels","text":"catkin_lint has messages in three different categories: errors, warnings, and notices. The -W option controls which problems are reported to the user: -W0 : only errors are reported -W1 : errors and warnings are reported (this is the default) -W2 : errors, warnings, and notices are reported Normally, catkin_lint returns a non-zero exit code if and only if errors occurred. The --strict option causes catkin_lint to treat any reported problem as error. You can also customize the category for particular diagnostics with --error ID , --warning ID , or --notice ID . You can also ignore messages entirely with --ignore ID .","title":"Diagnostic Levels"},{"location":"#errors","text":"Errors are severe enough to break the build and/or produce unintended side effects. Usually, they violate the rules outlined in the catkin manual .","title":"Errors"},{"location":"#warnings","text":"Potential errors which may indicate a bug in your package but may be justified for reasons catkin_lint cannot discern. Constructs which trigger a warning can usually be modified in a way that is functionally equivalent but more robust.","title":"Warnings"},{"location":"#notices","text":"Issues which are not objectionable from a technical view point but should be addressed to improve the quality of the package. Many notices highlight violations of the recommendations and best practises from the catkin manual.","title":"Notices"},{"location":"#ci-integration","text":"catkin_lint is available as optional test feature in the ROS Industrial CI and the ROS MoveIt Continuous Integration scripts.","title":"CI Integration"},{"location":"api/","text":"Register your own checks catkin_lint checks are implemented as submodules, and interact with the main program via callbacks. You can write your own checks for catkin_lint and run them with the -c command line option. You can also add them to your .catkin_lint configuration file to use them by default: [catkin_lint] extra_checks = my.customized.check my.other.check Each check is included via an entry function which setups the callbacks for the check. The entry function has a single parameter linter . The Linter object provides the following methods: require() linter.require(check_name) Checks may depend on the results of other checks. The require method ensures that check_name is called exactly once. Circular dependencies of the form A->B->C->A will be detected and cause an exception. In particular, tests must not require themselves. register_message() Note This method was added in version 1.6.6 linter.register_message(msg_id, text, description=None) Adds a custom message that can be issued with report() . Message IDs must be unique. Valid characters are upper-case letters, digits, and underscores only. Custom message IDs are also required to start with X_ , to avoid conflicts with built-in IDs. The text should be a short one-liner that concisely describes the problem. The description can be a paragraph or two for a more in-depth explanation. The description will reformat line breaks automatically to adjust for different terminal widths. Also, you can have placeholders of the form %(keyword)s . add_init_hook() def callback(info): ... linter.add_init_hook(callback) Registers an initialization hook that is called when the lint check for a particular package begins. add_command_hook() def callback(info, cmd, args): ... linter.add_command_hook(name, callback) Registers a command hook that is called each time the CMake parser encounters the command name . The command name and a list of its arguments are passed to the callback. All command names are converted to lower-case. add_final_hook() def callback(info): ... linter.add_final_hook(callback) Registers a final hook that is called when the CMake parser has finished parsing the CMakeLists.txt file. execute_hook() linter.execute_hook(info, cmd, args) Executes all registered command hooks for cmd . This is useful for CMake wrapper macros, so you don't have to duplicate all checks for the wrapped call. For example, the cuda_add_executable command hook calls the add_executable hooks this way. Info Object For each linted package, catkin_lint creates a dedicated info object that is passed to all callbacks. The info object can be used to store relevant data. Typically, the init hook is used to initialize check-specific variables in the info object. As a general rule, checks must not modify variables they do not own, and each check must ensure it uses unique variable names that do not conflict with other checks. The following variables are defined by catkin_lint itself: env : A CatkinEnvironment object that provides information about the ROS environment. path : The filesystem path to the package source folder manifest : A catkin_pkg.packages.Package object that is created from information in the package.xml . file : The currently parsed CMake file, relative to the package source folder. Is either CMakeLists.txt or an include file. Only valid in command hooks. line : The line number of the currently processed CMake command. Only valid in command hooks. commands : A set of all command names that have been encountered up to this point. find_packages : A set of all packages that have been configured with find_package() up to this point. targets : A set of all make targets that have been defined up to this point. executables : A set of all executables that have been defined up to this point. libraries : A set of all libraries that have been defined up to this point. var : A dictionary of all known CMake variables. Note that many variables have mocked values. report() info.report(level, msg_id, **kwargs) Reports a problem to the user. level must be one of catkin_lint.linter.ERROR , catkin_lint.linter.WARNING , or catkin_lint.linter.NOTICE . The msg_id refers to one of the defined diagnostic messages. Certain messages have placeholder variables that must be specified, e.g. cmd for the command name. If you wish to report a path, you should sanitize it with report_path() first. Note Starting with version 1.6.0, you can target a report to a different file location with the file_location keyword argument. location_of() Note This method was added in version 1.6.0 info.location_of(cmd) Returns the file location of the most recent invocation of the CMake command cmd . This is useful if a problem is detected belatedly, but should still be attributed to a particular faulty command. source_relative_path() info.source_relative_path(path) Returns a path relative to the package source directory or an absolute path if the path is not within the package. Can handle ${CMAKE_CURRENT_SOURCE_DIR} correctly. binary_relative_path() info.binary_relative_path(path) Returns a path relative to the package build directory or an absolute path if the path is not inside the build directory. Can handle ${CMAKE_CURRENT_BINARY_DIR} correctly. real_path() info.real_path(path) Returns the actual file system path for relative package path as returned by source_relative_path() . is_internal_path() info.is_internal_path(path) Returns True if the path is either below the package source directory or the package build directory. path_class() Note This method was added in version 1.5.0 info.path_class(path) Returns a value from the PathClass class, which can be one of SOURCE , BINARY , DISCOVERED , or OTHER . is_valid_path() Note This method was added in version 1.5.0 info.is_valid_path(path, valid=[PathClass.SOURCE, PathClass.BINARY, PathClass.DISCOVERED]) Returns True if the path belongs to any of the valid path classes. By default, any path is accepted which is either in the source tree, the a built file, or a path discovered by the appropriate CMake functions such as find_file() . is_existing_path() Note This method was added in version 1.5.0 info.is_existing_path(path, check=os.path.exists, require_source_folder=False, discovered_path_ok=True) Returns True if the path is a valid path argument for a catkin command, which means it's either an existing file or a file that will be generated by configure_file or add_custom_command . If discovered_path_ok is True , then a path discovered by find_package() , find_path() , find_file() or find_library() will be accepted as well. If require_source_folder is True , then any files which are not physically located within the source folder will be rejected. report_path() info.report_path(path) Returns path in a form that is suitable for user consumption, i.e., as argument of report() . In particular, this will ensure that mock paths are rewritten in a form that is informative for the user. is_catkin_install_destination() info.is_catkin_install_destination(path, subdir=None) Returns True if the path points to the install space of the catkin workspace. If subdir is not None , it checks if the path points to the specified subdirectory in the install space. CatkinEnvironment object get_package_type() Note This method was added in version 1.6.10 env.get_package_type(name) Returns one of the following values: catkin_lint.environment.PackageType.CATKIN if name is a catkin package catkin_lint.environment.PackageType.OTHER if name is a package but not catkin-based catkin_lint.environment.PackageType.UNKNOWN if name is not a known package catkin_lint.environment.PackageType.INDETERMINATE if the package type could not be determined is_catkin_pkg() env.is_catkin_pkg(name) Returns True if name is a catkin package. May return wrong results if env.ok is not True . Warning This function is deprecated since version 1.6.10. Please use get_package_type() instead. is_known_pkg() env.is_known_pkg(name) Returns True if name is a known package. May return wrong results if env.ok is not True . Warning This function is deprecated since version 1.6.10. Please use get_package_type() instead. ok env.ok Is True if the list of ROS dependencies was properly initialized. Warning This property is deprecated since version 1.6.10. Please use get_package_type() instead.","title":"API"},{"location":"api/#register-your-own-checks","text":"catkin_lint checks are implemented as submodules, and interact with the main program via callbacks. You can write your own checks for catkin_lint and run them with the -c command line option. You can also add them to your .catkin_lint configuration file to use them by default: [catkin_lint] extra_checks = my.customized.check my.other.check Each check is included via an entry function which setups the callbacks for the check. The entry function has a single parameter linter . The Linter object provides the following methods:","title":"Register your own checks"},{"location":"api/#require","text":"linter.require(check_name) Checks may depend on the results of other checks. The require method ensures that check_name is called exactly once. Circular dependencies of the form A->B->C->A will be detected and cause an exception. In particular, tests must not require themselves.","title":"require()"},{"location":"api/#register_message","text":"Note This method was added in version 1.6.6 linter.register_message(msg_id, text, description=None) Adds a custom message that can be issued with report() . Message IDs must be unique. Valid characters are upper-case letters, digits, and underscores only. Custom message IDs are also required to start with X_ , to avoid conflicts with built-in IDs. The text should be a short one-liner that concisely describes the problem. The description can be a paragraph or two for a more in-depth explanation. The description will reformat line breaks automatically to adjust for different terminal widths. Also, you can have placeholders of the form %(keyword)s .","title":"register_message()"},{"location":"api/#add_init_hook","text":"def callback(info): ... linter.add_init_hook(callback) Registers an initialization hook that is called when the lint check for a particular package begins.","title":"add_init_hook()"},{"location":"api/#add_command_hook","text":"def callback(info, cmd, args): ... linter.add_command_hook(name, callback) Registers a command hook that is called each time the CMake parser encounters the command name . The command name and a list of its arguments are passed to the callback. All command names are converted to lower-case.","title":"add_command_hook()"},{"location":"api/#add_final_hook","text":"def callback(info): ... linter.add_final_hook(callback) Registers a final hook that is called when the CMake parser has finished parsing the CMakeLists.txt file.","title":"add_final_hook()"},{"location":"api/#execute_hook","text":"linter.execute_hook(info, cmd, args) Executes all registered command hooks for cmd . This is useful for CMake wrapper macros, so you don't have to duplicate all checks for the wrapped call. For example, the cuda_add_executable command hook calls the add_executable hooks this way.","title":"execute_hook()"},{"location":"api/#info-object","text":"For each linted package, catkin_lint creates a dedicated info object that is passed to all callbacks. The info object can be used to store relevant data. Typically, the init hook is used to initialize check-specific variables in the info object. As a general rule, checks must not modify variables they do not own, and each check must ensure it uses unique variable names that do not conflict with other checks. The following variables are defined by catkin_lint itself: env : A CatkinEnvironment object that provides information about the ROS environment. path : The filesystem path to the package source folder manifest : A catkin_pkg.packages.Package object that is created from information in the package.xml . file : The currently parsed CMake file, relative to the package source folder. Is either CMakeLists.txt or an include file. Only valid in command hooks. line : The line number of the currently processed CMake command. Only valid in command hooks. commands : A set of all command names that have been encountered up to this point. find_packages : A set of all packages that have been configured with find_package() up to this point. targets : A set of all make targets that have been defined up to this point. executables : A set of all executables that have been defined up to this point. libraries : A set of all libraries that have been defined up to this point. var : A dictionary of all known CMake variables. Note that many variables have mocked values.","title":"Info Object"},{"location":"api/#report","text":"info.report(level, msg_id, **kwargs) Reports a problem to the user. level must be one of catkin_lint.linter.ERROR , catkin_lint.linter.WARNING , or catkin_lint.linter.NOTICE . The msg_id refers to one of the defined diagnostic messages. Certain messages have placeholder variables that must be specified, e.g. cmd for the command name. If you wish to report a path, you should sanitize it with report_path() first. Note Starting with version 1.6.0, you can target a report to a different file location with the file_location keyword argument.","title":"report()"},{"location":"api/#location_of","text":"Note This method was added in version 1.6.0 info.location_of(cmd) Returns the file location of the most recent invocation of the CMake command cmd . This is useful if a problem is detected belatedly, but should still be attributed to a particular faulty command.","title":"location_of()"},{"location":"api/#source_relative_path","text":"info.source_relative_path(path) Returns a path relative to the package source directory or an absolute path if the path is not within the package. Can handle ${CMAKE_CURRENT_SOURCE_DIR} correctly.","title":"source_relative_path()"},{"location":"api/#binary_relative_path","text":"info.binary_relative_path(path) Returns a path relative to the package build directory or an absolute path if the path is not inside the build directory. Can handle ${CMAKE_CURRENT_BINARY_DIR} correctly.","title":"binary_relative_path()"},{"location":"api/#real_path","text":"info.real_path(path) Returns the actual file system path for relative package path as returned by source_relative_path() .","title":"real_path()"},{"location":"api/#is_internal_path","text":"info.is_internal_path(path) Returns True if the path is either below the package source directory or the package build directory.","title":"is_internal_path()"},{"location":"api/#path_class","text":"Note This method was added in version 1.5.0 info.path_class(path) Returns a value from the PathClass class, which can be one of SOURCE , BINARY , DISCOVERED , or OTHER .","title":"path_class()"},{"location":"api/#is_valid_path","text":"Note This method was added in version 1.5.0 info.is_valid_path(path, valid=[PathClass.SOURCE, PathClass.BINARY, PathClass.DISCOVERED]) Returns True if the path belongs to any of the valid path classes. By default, any path is accepted which is either in the source tree, the a built file, or a path discovered by the appropriate CMake functions such as find_file() .","title":"is_valid_path()"},{"location":"api/#is_existing_path","text":"Note This method was added in version 1.5.0 info.is_existing_path(path, check=os.path.exists, require_source_folder=False, discovered_path_ok=True) Returns True if the path is a valid path argument for a catkin command, which means it's either an existing file or a file that will be generated by configure_file or add_custom_command . If discovered_path_ok is True , then a path discovered by find_package() , find_path() , find_file() or find_library() will be accepted as well. If require_source_folder is True , then any files which are not physically located within the source folder will be rejected.","title":"is_existing_path()"},{"location":"api/#report_path","text":"info.report_path(path) Returns path in a form that is suitable for user consumption, i.e., as argument of report() . In particular, this will ensure that mock paths are rewritten in a form that is informative for the user.","title":"report_path()"},{"location":"api/#is_catkin_install_destination","text":"info.is_catkin_install_destination(path, subdir=None) Returns True if the path points to the install space of the catkin workspace. If subdir is not None , it checks if the path points to the specified subdirectory in the install space.","title":"is_catkin_install_destination()"},{"location":"api/#catkinenvironment-object","text":"","title":"CatkinEnvironment object"},{"location":"api/#get_package_type","text":"Note This method was added in version 1.6.10 env.get_package_type(name) Returns one of the following values: catkin_lint.environment.PackageType.CATKIN if name is a catkin package catkin_lint.environment.PackageType.OTHER if name is a package but not catkin-based catkin_lint.environment.PackageType.UNKNOWN if name is not a known package catkin_lint.environment.PackageType.INDETERMINATE if the package type could not be determined","title":"get_package_type()"},{"location":"api/#is_catkin_pkg","text":"env.is_catkin_pkg(name) Returns True if name is a catkin package. May return wrong results if env.ok is not True . Warning This function is deprecated since version 1.6.10. Please use get_package_type() instead.","title":"is_catkin_pkg()"},{"location":"api/#is_known_pkg","text":"env.is_known_pkg(name) Returns True if name is a known package. May return wrong results if env.ok is not True . Warning This function is deprecated since version 1.6.10. Please use get_package_type() instead.","title":"is_known_pkg()"},{"location":"api/#ok","text":"env.ok Is True if the list of ROS dependencies was properly initialized. Warning This property is deprecated since version 1.6.10. Please use get_package_type() instead.","title":"ok"},{"location":"install/","text":"Installation Ubuntu Prebuilt packages are available from the official Ubuntu archive and the ROS repository . If you are using ROS Noetic on Ubuntu 20.04 or later, install catkin_lint with $ sudo apt install catkin-lint Note Starting with Ubuntu 20.04, the package has been renamed. If you are using an older release, please run sudo apt install python-catkin-lint instead. Alternatively, you can use Timo's Ubuntu PPA for ROS Packages on Launchpad, which will always ship the latest release: $ sudo add-apt-repository ppa:roehling/ros $ sudo apt update $ sudo apt install catkin-lint Debian Prebuilt packages are available from the official Debian archive. Install with $ sudo apt install catkin-lint Note For Debian Buster, the package is named python-catkin-lint . Download from PyPI You can download and install catkin_lint from the Python Package Index with: $ sudo pip install catkin-lint Install from Source You can clone catkin_lint from GitHub : $ git clone https://github.com/fkie/catkin_lint.git $ cd catkin_lint $ sudo python setup.py install","title":"Installation"},{"location":"install/#installation","text":"","title":"Installation"},{"location":"install/#ubuntu","text":"Prebuilt packages are available from the official Ubuntu archive and the ROS repository . If you are using ROS Noetic on Ubuntu 20.04 or later, install catkin_lint with $ sudo apt install catkin-lint Note Starting with Ubuntu 20.04, the package has been renamed. If you are using an older release, please run sudo apt install python-catkin-lint instead. Alternatively, you can use Timo's Ubuntu PPA for ROS Packages on Launchpad, which will always ship the latest release: $ sudo add-apt-repository ppa:roehling/ros $ sudo apt update $ sudo apt install catkin-lint","title":"Ubuntu"},{"location":"install/#debian","text":"Prebuilt packages are available from the official Debian archive. Install with $ sudo apt install catkin-lint Note For Debian Buster, the package is named python-catkin-lint .","title":"Debian"},{"location":"install/#download-from-pypi","text":"You can download and install catkin_lint from the Python Package Index with: $ sudo pip install catkin-lint","title":"Download from PyPI"},{"location":"install/#install-from-source","text":"You can clone catkin_lint from GitHub : $ git clone https://github.com/fkie/catkin_lint.git $ cd catkin_lint $ sudo python setup.py install","title":"Install from Source"},{"location":"messages/","text":"catkin_lint diagnostic messages This is a list of all messages which might be shown by catkin_lint . Each problem has a unique ID (such as catkin_order_violation ), which you can use to disable certain messages, either with the command line option --ignore ID , or by adding a pragma line #catkin_lint: ignore ID at the beginning of the CMakeLists.txt file. As a third option, you can add a pragma line #catkin_lint: ignore_once ID right before the offending statement. Use this if you want to ignore a particular instance of a problem but still be notified if the same problem occurs someplace else. You may also use #catkin_lint: report ID at any point to override a previous ignore . Since version 1.5.4, you may also customize the severity with the command line options --error ID , --warning ID , or --notice ID . You can also add the pragma line #catkin_lint: skip in any if() , foreach() , or macro() block, which will instruct the parser to ignore all remaining commands in the block until the else() , endif() , endforeach() , or endmacro() statement. ' pkg ' in find_package(catkin) is not a catkin package ID : no_catkin_component Severity : error Explanation : The find_package(catkin) call can list other catkin packages as dependencies with the COMPONENTS keyword. This is shorter than multiple find_package() calls, but does not work for system dependencies. cmd () exports external scope path ' directory ' ID : external_interface_path Severity : warning Explanation : You have exported an include path as part of your interface for dependent targets, but that path does not belong to your package. You probably meant to use the PRIVATE scope if you merely need that include path for your build. If you actually wanted to export the path to your dependees, you hould be aware that target properties will be exported as fixed strings, meaning your installed package will break if that location changes for any reason. A more robust way would be to use target_link_libraries( scope ) with the proper imported target instead. cmd () is called before find_package(catkin) ID : catkin_order_violation Severity : error Explanation : Catkin macros cannot be called before catkin has been configured with find_package(catkin) . cmd () is not allowed in meta packages ID : invalid_meta_command Severity : error Explanation : Meta packages do not contain code or data and are merely dependency lists with very strict requirements for the format of the CMakeLists.txt file. cmd () needs missing directory ' directory ' ID : missing_directory Severity : error Explanation : This catkin command processes a particular directory which is missing from the package source folder. cmd () needs missing file ' file ' ID : missing_file Severity : error Explanation : This catkin command processes a particular file which is missing from the package source folder. cmd () should be all lower-case ID : cmd_case Severity : notice Explanation : The catkin manual recommends that all commands be written in lower case. cmd () used without if(CATKIN_ENABLE_TESTING) ID : unguarded_test_cmd Severity : error Explanation : You have used a test command without properly guarding it by a if(CATKIN_ENABLE_TESTING) block. cmd () uses directory ' directory ' which is not in package ID : external_directory Severity : warning Explanation : This catkin command uses a directory which lies outside of the package source folder. While this may work in your particular setup, you cannot assume file locations in general. Use find_path() to detect external locations insteed. cmd () uses file ' file ' which is not in package ID : external_file Severity : error, warning Explanation : This catkin command uses a file which lies outside of the package source folder. While this may work in your particular setup, you cannot assume file locations in general. Use find_file() to detect external locations insteed. export plugin file ' file ' is not installed to ${CATKIN_PACKAGE_SHARE_DESTINATION} ID : uninstalled_plugin Severity : error, warning Explanation : Your package can be used from the devel space but cannot be installed properly, because a plugin declaration file which is listed in your package.xml is not installed to the correct location. export plugin file reference must start with '${prefix}/' ID : plugin_export_prefix Severity : error Explanation : The ${prefix} variable is carefully overloaded to work with both devel space and install space and must be used in all tags. export plugin refers to missing file ' file ' ID : missing_plugin Severity : error Explanation : A plugin declaration file which is listed in your package.xml is missing from the package source folder. feature requires at least CMake version ID : cmake_old Severity : warning Explanation : You are using a CMake feature which is supported only by CMake version or newer. You should set your cmake_minimum_required() declaration accordingly. first_cmd () is called before second_cmd () ID : order_violation Severity : error Explanation : Certain configuration macros must be called in a specific order as specified by the catkin build manual. Failure to do so may lead to improper configuration of the package and build problems. old_cmd () is deprecated, use new_cmd () instead ID : deprecated_cmd Severity : error Explanation : Some macros have been deprecated and replaced by newer versions. Please upgrade your CMakeLists.txt to ensure compatibility with future caktin versions. wrong_type _depend ' pkg ' should be a right_type _depend ID : wrong_depend Severity : error Explanation : You have listed a package as the wrong dependency type. The catkin build system defines a number of different dependencies for building a package, running its nodes or linking against its libraries. As a general rule, buildtool_depends are needed to build the package, build_depends are non-transitive build dependencies which are not visible to users of your package, build_export_depends are publicly visible transitive dependencies, exec_depends are needed at runtime, and test_depends are for unit tests only. CMake module ' old_module ' is deprecated, use ' new_module ' instead ID : deprecated_cmake_module Severity : warning Explanation : Some CMake modules have been provided by cmake_modules in the past, but are now provided by the system package or CMake itself. Please upgrade your CMakeLists.txt to ensure compatibility with future catkin versions. OS error: msg ID : os_error Severity : error Explanation : An operating system error has occured. This is not a linting problem per se but might be caused by a missing or unreadable file. call to find_package( pkg ) shadows previously selected components ID : shadowed_find Severity : error Explanation : You have more than one find_package() call for a package, and the COMPONENTS list of the later call does not include a previously chosen component. catkin_metapackage() in regular package ID : wrong_catkin_metapackage Severity : error Explanation : The catkin_metapackage() command signals your intent to declare a meta package, but the package.xml does not contain a tag. catkin_package() dependency ' pkg ' belongs in CATKIN_DEPENDS ID : catkin_as_system_depend Severity : error Explanation : In your catkin_package() call, you have listed a catkin package in the DEPENDS stanza, but it belongs in the CATKIN_DEPENDS stanza instead. catkin_package() dependency ' pkg ' belongs in DEPENDS ID : system_as_catkin_depend Severity : error Explanation : In your catkin_package() call, you have listed a system dependency in the CATKIN_DEPENDS stanza, but it belongs in the DEPENDS stanza instead. catkin_package() dependency ' pkg ' is not configured properly ID : unconfigured_system_depend Severity : error Explanation : In order to export a system package as dependency, you must either call find_package( pkg ) first or initialize the pkg _INCLUDE_DIRS and pkg _LIBRARIES variables manually. catkin_package() exports non-package include path ID : external_include_path Severity : error Explanation : You listed one or more include paths in the INCLUDE_DIRS stanza of your catkin_package() call which are not part of your package. If you want to export include paths of other modules, use find_package() , find_path() , and/or find_library() and add the dependency to the DEPENDS stanza. catkin_package() exports package include path that is not installed ID : uninstalled_include_path Severity : error, warning Explanation : Your package can be used from the devel space but cannot be installed properly, because the header files will not be copied to the proper location. catkin_package() exports pkg-config module ' pkg ' ID : exported_pkg_config Severity : error Explanation : Although CMake can invoke pkg-config to detect other modules, this does not work well with catkin, as pkg-config may require you to add link directories. Use the results of pkg_check_module() as hint for find_path() and find_library() instead. catkin_package() in meta package ID : wrong_catkin_package Severity : error Explanation : Meta packages use the catkin_metapackage() command to declare a meta package. This performs additional checks and ensures that all requirements are met. condition ' cond ' is ambiguous ID : ambiguous_condition Severity : warning Explanation : Historically, the if() command will interpret a single token as a variable name and transparently resolve it if possible. Unquoted variable references like if(${var}) can lead to incorrect results if ${var} resolves to a different variable name. Use if(var) or if(\"${var}\") instead. duplicate cmd () ID : duplicate_cmd Severity : error Explanation : You have called this command more than once, but this does not make sense. If the calls use different arguments, consolidate them into a single call, otherwise simply remove the second. duplicate find_package( pkg ) ID : duplicate_find Severity : warning Explanation : You called find_package() more than once for a particular package, which is not needed except for very specific, advanced circumstances. duplicate include path ${ pkg _INCLUDE_DIRS} ID : duplicate_include_path Severity : warning Explanation : Include paths of packages listed in the find_package(catkin) command are added implicitly by the ${catkin_INCLUDE_DIRS} variable. There is no need to add it a second time. environment variables should not be used ID : env_var Severity : warning Explanation : The behavior of your build should not depend on any environment variables. executable file is not installed to bin destination ID : wrong_bin_install_destination Severity : warning Explanation : Your package installs one or more files to an unexpected location. Executable files should end up in either ${CATKIN_GLOBAL_BIN_DESTINATION} or ${CATKIN_PACKAGE_BIN_DESTINATION}. exported include path ' path ' does not exist ID : missing_include_path Severity : error Explanation : You have listed an invalid include path in the INCLUDE_DIRS stanza of the catkin_package() command. exported library ' target ' cannot have different output name ID : export_lib_renamed Severity : error Explanation : Due to a limitation of the catkin build system, the catkin_package() library export function will break if the logical target name is not equal to the actual library name. exported library ' target ' is not a library ID : export_lib_not_lib Severity : error Explanation : You listed a library in the LIBRARIES stanza of your catkin_package() call, but it really is an executable. exported library ' target ' is not installed ID : uninstalled_export_lib Severity : error, warning Explanation : Your package can be used from the devel space but cannot be installed properly, because a library that is exported via catkin_package() will not be copied to the proper location. exported package include path but no exported library ID : missing_export_lib Severity : warning Explanation : Your package exports a package include path and builds at least one library, which suggests that you may want to export the library to other packages as well. extra arguments in cmd () ID : endblock_args Severity : notice Explanation : The catkin manual recommends that cmd and other end-of-block statements have no arguments. If you have nested blocks, you should indent them properly instead. file ' script ' is executable but not installed ID : uninstalled_script Severity : warning Explanation : Your package contains a file that is marked as executable but not installed. If it is a script intended to be run (e.g. with rosrun), it will not work outside the devel tree. If it is not an executable script, you should fix the file permissions. file setup.py found but no catkin_python_setup() call ID : missing_python_setup Severity : error Explanation : The catkin_python_setup() call is required to properly configure python modules, and the existing setup.py indicates that your package provides one or more python modules. find_package( pkg ) before find_package(cmake_modules) ID : missing_cmake_modules Severity : warning Explanation : You need to find_package() cmake_modules before you can use one of its custom configuration modules. find_package( pkg ) has no REQUIRED option ID : missing_required Severity : error, warning Explanation : The package cannot build without this dependency, so it should be marked as REQUIRED accordingly. Use if( pkg _FOUND) clauses to use optional packages. generate_messages() called but no message declared ID : unused_generate_msg Severity : warning Explanation : The generate_messages() call creates the messages, services, and actions which are declared in your package. If your package does not supply any of these, you do not have to call generate_messages() at all. global variable ' var ' should contain project name ID : global_var_collision Severity : notice Explanation : Global variables and options are stored in the cache. You should prefix your variable names with the project name to avoid name collisions with other packages. header file ' file ' is not installed to package-specific include path ID : header_outside_package_include_path Severity : notice Explanation : It is recommend that all header files are installed into a package-specific include subdirectory to prevent file name collisions between different packages. The variable ${CATKIN_PACKAGE_INCLUDE_DESTINATION} will point to the correct location. include path ' path ' is exported but not used for the build ID : unused_include_path Severity : warning Explanation : You have listed an include path in the INCLUDE_DIRS stanza of the catkin_package() command, but that path is not mentioned in any include_directories() call. include paths ' path ' and ' parent_path ' are ambiguous ID : ambiguous_include_path Severity : warning Explanation : You have used two include paths where one is a parent of the other. Thus the same headers can be included with two different include paths which may confuse users. It is recommended that you keep your include paths consistent. install( type ... dest ) does not install to ${CATKIN_INSTALL_PREFIX} ID : wrong_install_destination Severity : warning Explanation : Your package installs one or more files to an unexpected location. Catkin provides a number of standard variables ${CATKIN_*_DESTINATION} to specify installation folders. You should use those to ensure that your package will continue to work if the file system layout is changed in the future. launch configuration needs type _depend on ' pkg ' ID : launch_depend Severity : warning Explanation : Your package refers to another package in one of its launch files, but you do not have this dependency in your package.xml library output name ' output ' has redundant 'lib' prefix ID : redundant_lib_prefix Severity : notice Explanation : Libraries are automatically prefixed with 'lib', so your library will end up with a file name like 'lib output .so'. You can use set_target_properties(... PROPERTIES OUTPUT_NAME ...) to give your library a different file name without changing the target name. line is not indented properly ID : indentation Severity : notice Explanation : For better readability, each command should be placed on its own line. if() and foreach() bodies should be indented by one or more extra spaces. link_directories() must not be used for system depends ID : external_link_directory Severity : error Explanation : Directories which are added to the search path with link_directories() will not be propagated to dependent packages. Use find_package() or find_library() with the appropriate PATHS or HINTS instead. list name should be sorted ID : unsorted_list Severity : notice Explanation : The catkin manual recommends that list element be kept in order. malformed argument list: msg ID : argument_error Severity : warning Explanation : You invoked a CMake command with a malformed argument list. Most likely, you forgot to properly quote variables which may be empty or undefined. meaningless package description ' text ' ID : description_meaningless Severity : notice Explanation : Your package description merely consists of typical filler words which do not actually describe the contents of your package in a meaningful way. meta packages must not have type _depends ID : invalid_meta_depend Severity : error Explanation : Meta packages do not contain code or data and are merely dependency lists. As meta packages do neither build nor test anything, the only valid dependency type is the run_depend. misconfigured catkin package ' pkg ' ID : misconfigured_catkin_package Severity : error Explanation : You use an unsupported way to include a catkin package in your build. Even though this might work in your particular case, you should use the proper find_package() mechanism to make sure that all relevant CMake macros will be run. missing cmd () ID : missing_cmd Severity : error Explanation : You failed to call a command that is required for your package to work. Please refer to the catkin build manual for details. missing type _depend on ' pkg ' ID : missing_depend Severity : error Explanation : Your package uses features of another package but you failed to list this dependency in your package.xml missing COMPONENTS keyword before ' pkg ' ID : missing_components Severity : notice Explanation : The find_package(catkin) call can add other catkin packages as dependencies with the COMPONENTS keyword. The find_package() command lists additional packages but has no COMPONENTS keyword. missing find_package( pkg ) ID : missing_find Severity : error Explanation : You failed to call find_package() for a dependency of your package. missing generate_messages() ID : missing_generate_msg Severity : error Explanation : The generate_messages() call creates the messages, services, and actions which are declared in your package by add_message_files() , add_service_files() , and add_action_files() respectively. missing include_directories(${catkin_INCLUDE_DIRS}) ID : unused_catkin_include_dirs Severity : error Explanation : You must add the catkin include paths to your include search list, or you might experience build failures. operands for operator op should be quoted strings ID : unquoted_string_op Severity : notice Explanation : The catkin manual recommends that if() conditions with string operators should have the operands enclosed in double quotes. package ' pkg ' must be in CATKIN_DEPENDS in catkin_package() ID : missing_catkin_depend Severity : error Explanation : You have a runtime dependency that you must add to the CATKIN_DEPENDS stanza of your catkin_package() . package description starts with boilerplate ' text ' ID : description_boilerplate Severity : notice Explanation : Your package description starts with a number of typical filler words which do not actually describe the contents of your package. Typically, you can simply delete these words from the description, and it will still make sense and be much more concise. package exports export plugin but does not type _depend on ' pkg ' ID : plugin_depend Severity : warning Explanation : Your package exports a plugin for another package, but fails to list said package as a dependency. package path name ' path ' differs from package name ID : package_path_name Severity : notice Explanation : Your package resides in a folder that has a different name than the package itself. This is confusing and might break the assumptions of some tools. parse error: msg ID : parse_error Severity : warning Explanation : Your package has a malformed file that could not be processed for linting. project name ' name ' differs from package name ID : project_name Severity : error Explanation : The CMake project name must be identical to the package name. For backwards compatibility reasons, both names should also be identical to the name of the source folder that contains the package. referenced target ' target ' is not defined ID : undefined_target Severity : error Explanation : Your package installs or exports a CMake target which is not defined at all. This could be a typo, or the target is implicitly defined by a macro that is unknown to catkin_lint . script ' file ' has no interpreter shebang line ID : missing_shebang Severity : error Explanation : All interpreter scripts need an appropriate shebang line, i.e. the first line has to start with '#!' and needs to name the full path to the interpreter executable. script ' script ' must be executable ID : script_not_executable Severity : error Explanation : Your package contains a script file that has to be marked as executable. On Un*x systems, run 'chmod +x \" script \"' to set the executable bit. subdirectory ' subdir ' contains a subproject ID : subproject Severity : warning Explanation : Your package has an independent subproject. This can interact with catkin in unusual ways and is strongly discouraged. No further checks are performed in this subdirectory. subdirectory ' subdir ' is added a second time ID : duplicate_subdir Severity : error Explanation : You added another subdirectory with add_subdirectory() multiple times. This can also happen if you accidentally created a loop where subdir A adds subdir B, which adds subdir A again. subdirectory ' subdir ' is missing ID : missing_subdir Severity : error Explanation : You specified a subdirectory which does not exists or is unreadable. subdirectory subdir is not in package ID : external_subdir Severity : error Explanation : You added another subdirectory with add_subdirectory() , but the specified path points outside of the package source directory. support for CMake versions older than 2.8.12 is deprecated ID : cmake_ancient Severity : warning Explanation : Starting with CMake 3.19, compatibility with ancient CMake versions has been deprecated and triggers a developer warning. Most likely, you are not actually depending on ancient CMake behavior and can bump the minimum required version without ill effects. target ' export_target ' depends on target ' target ' which is not installed ID : uninstalled_depend Severity : error Explanation : Your package can be used from the devel space but cannot be installed properly, because one of your installed targets depends on a library from your package that is not installed as well. target ' target ' has invalid characters in its output file name ID : invalid_target_output Severity : error Explanation : The output file that your target is supposed to generate contains invalid characters in its name. You probably forget to call set_target_properties(... PROPERTIES OUTPUT_NAME ...) target ' target ' is not installed ID : uninstalled_target Severity : warning Explanation : Your package can be used from the devel space but cannot be installed properly, because the build target will not be copied to the proper location. test_depend ' pkg ' used without if(CATKIN_ENABLE_TESTING) ID : unguarded_test_depend Severity : error Explanation : You have used a test dependency without properly guarding it by a if(CATKIN_ENABLE_TESTING) block. You must add a proper build dependency if you wish to use this package even if tests are disabled. unconfigured build_depend on ' pkg ' ID : unconfigured_build_depend Severity : error Explanation : You declare a build dependency on another package but neither call find_package() nor have it listed as catkin component in the find_package(catkin) call. unconfigured message dependency ' pkg ' ID : unconfigured_msg_depend Severity : error Explanation : Your messages depend on another package which is neither find_package() 'd nor listed as a component in the find_package(catkin) call. unknown package ' pkg ' ID : unknown_package Severity : error Explanation : You are referring to a package which seems to be neither a catkin package nor a known system dependency. You may have misspelled the name, or your rosdep database needs to be refreshed with \"rosdep update\". unused type _depend on ' pkg ' ID : unused_depend Severity : error Explanation : You have a listed a package dependency but do not appear to use any of the features it provides. use ${PROJECT_NAME} instead of ' name ' ID : literal_project_name Severity : notice Explanation : The catkin manual recommends that you use the ${PROJECT_NAME} variable instead of the literal project name. use find_package( pkg ) instead of include(Find pkg .cmake) ID : find_by_include Severity : error Explanation : The FindXXX.cmake modules are intended to be included by the find_package() command. use of link_directories() is strongly discouraged ID : link_directory Severity : warning Explanation : Directories which are added to the search path with link_directories() will not be propagated to dependent packages. You should avoid this command or at least be aware that it might not work as expected in dependent packages. variable var is modified ID : critical_var_append Severity : warning Explanation : You have appended extra data to a critical CMake variable. This might break the build on different systems or affect the global catkin workspace in unintended ways. variable var is modified ID : immutable_var Severity : error Explanation : You have modified a CMake variable that is initialized by CMake itself and must not be modified under any circumstances. variable var is overwritten ID : critical_var_overwrite Severity : error Explanation : You have overwritten a critical CMake variable and its original content is lost. This will most likely break the build on different systems or affect the global catkin workspace in unintended ways. variable CMAKE_BUILD_TYPE is overwritten unconditionally ID : cmake_build_type Severity : error Explanation : If you wish to provide a default value for CMAKE_BUILD_TYPE, make sure that you do not overwrite user preferences. You should guard the set() command with an appropriate if(NOT CMAKE_BUILD_TYPE) block.","title":"Messages"},{"location":"messages/#catkin_lint-diagnostic-messages","text":"This is a list of all messages which might be shown by catkin_lint . Each problem has a unique ID (such as catkin_order_violation ), which you can use to disable certain messages, either with the command line option --ignore ID , or by adding a pragma line #catkin_lint: ignore ID at the beginning of the CMakeLists.txt file. As a third option, you can add a pragma line #catkin_lint: ignore_once ID right before the offending statement. Use this if you want to ignore a particular instance of a problem but still be notified if the same problem occurs someplace else. You may also use #catkin_lint: report ID at any point to override a previous ignore . Since version 1.5.4, you may also customize the severity with the command line options --error ID , --warning ID , or --notice ID . You can also add the pragma line #catkin_lint: skip in any if() , foreach() , or macro() block, which will instruct the parser to ignore all remaining commands in the block until the else() , endif() , endforeach() , or endmacro() statement.","title":"catkin_lint diagnostic messages"},{"location":"messages/#pkg-in-find_packagecatkin-is-not-a-catkin-package","text":"ID : no_catkin_component Severity : error Explanation : The find_package(catkin) call can list other catkin packages as dependencies with the COMPONENTS keyword. This is shorter than multiple find_package() calls, but does not work for system dependencies.","title":"'pkg' in find_package(catkin) is not a catkin package"},{"location":"messages/#cmd-exports-external-scope-path-directory","text":"ID : external_interface_path Severity : warning Explanation : You have exported an include path as part of your interface for dependent targets, but that path does not belong to your package. You probably meant to use the PRIVATE scope if you merely need that include path for your build. If you actually wanted to export the path to your dependees, you hould be aware that target properties will be exported as fixed strings, meaning your installed package will break if that location changes for any reason. A more robust way would be to use target_link_libraries( scope ) with the proper imported target instead.","title":"cmd() exports external scope path 'directory'"},{"location":"messages/#cmd-is-called-before-find_packagecatkin","text":"ID : catkin_order_violation Severity : error Explanation : Catkin macros cannot be called before catkin has been configured with find_package(catkin) .","title":"cmd() is called before find_package(catkin)"},{"location":"messages/#cmd-is-not-allowed-in-meta-packages","text":"ID : invalid_meta_command Severity : error Explanation : Meta packages do not contain code or data and are merely dependency lists with very strict requirements for the format of the CMakeLists.txt file.","title":"cmd() is not allowed in meta packages"},{"location":"messages/#cmd-needs-missing-directory-directory","text":"ID : missing_directory Severity : error Explanation : This catkin command processes a particular directory which is missing from the package source folder.","title":"cmd() needs missing directory 'directory'"},{"location":"messages/#cmd-needs-missing-file-file","text":"ID : missing_file Severity : error Explanation : This catkin command processes a particular file which is missing from the package source folder.","title":"cmd() needs missing file 'file'"},{"location":"messages/#cmd-should-be-all-lower-case","text":"ID : cmd_case Severity : notice Explanation : The catkin manual recommends that all commands be written in lower case.","title":"cmd() should be all lower-case"},{"location":"messages/#cmd-used-without-ifcatkin_enable_testing","text":"ID : unguarded_test_cmd Severity : error Explanation : You have used a test command without properly guarding it by a if(CATKIN_ENABLE_TESTING) block.","title":"cmd() used without if(CATKIN_ENABLE_TESTING)"},{"location":"messages/#cmd-uses-directory-directory-which-is-not-in-package","text":"ID : external_directory Severity : warning Explanation : This catkin command uses a directory which lies outside of the package source folder. While this may work in your particular setup, you cannot assume file locations in general. Use find_path() to detect external locations insteed.","title":"cmd() uses directory 'directory' which is not in package"},{"location":"messages/#cmd-uses-file-file-which-is-not-in-package","text":"ID : external_file Severity : error, warning Explanation : This catkin command uses a file which lies outside of the package source folder. While this may work in your particular setup, you cannot assume file locations in general. Use find_file() to detect external locations insteed.","title":"cmd() uses file 'file' which is not in package"},{"location":"messages/#export-plugin-file-file-is-not-installed-to-catkin_package_share_destination","text":"ID : uninstalled_plugin Severity : error, warning Explanation : Your package can be used from the devel space but cannot be installed properly, because a plugin declaration file which is listed in your package.xml is not installed to the correct location.","title":"export plugin file 'file' is not installed to ${CATKIN_PACKAGE_SHARE_DESTINATION}"},{"location":"messages/#export-plugin-file-reference-must-start-with-prefix","text":"ID : plugin_export_prefix Severity : error Explanation : The ${prefix} variable is carefully overloaded to work with both devel space and install space and must be used in all tags.","title":"export plugin file reference must start with '${prefix}/'"},{"location":"messages/#export-plugin-refers-to-missing-file-file","text":"ID : missing_plugin Severity : error Explanation : A plugin declaration file which is listed in your package.xml is missing from the package source folder.","title":"export plugin refers to missing file 'file'"},{"location":"messages/#feature-requires-at-least-cmake-version","text":"ID : cmake_old Severity : warning Explanation : You are using a CMake feature which is supported only by CMake version or newer. You should set your cmake_minimum_required() declaration accordingly.","title":"feature requires at least CMake version"},{"location":"messages/#first_cmd-is-called-before-second_cmd","text":"ID : order_violation Severity : error Explanation : Certain configuration macros must be called in a specific order as specified by the catkin build manual. Failure to do so may lead to improper configuration of the package and build problems.","title":"first_cmd() is called before second_cmd()"},{"location":"messages/#old_cmd-is-deprecated-use-new_cmd-instead","text":"ID : deprecated_cmd Severity : error Explanation : Some macros have been deprecated and replaced by newer versions. Please upgrade your CMakeLists.txt to ensure compatibility with future caktin versions.","title":"old_cmd() is deprecated, use new_cmd() instead"},{"location":"messages/#wrong_type_depend-pkg-should-be-a-right_type_depend","text":"ID : wrong_depend Severity : error Explanation : You have listed a package as the wrong dependency type. The catkin build system defines a number of different dependencies for building a package, running its nodes or linking against its libraries. As a general rule, buildtool_depends are needed to build the package, build_depends are non-transitive build dependencies which are not visible to users of your package, build_export_depends are publicly visible transitive dependencies, exec_depends are needed at runtime, and test_depends are for unit tests only.","title":"wrong_type_depend 'pkg' should be a right_type_depend"},{"location":"messages/#cmake-module-old_module-is-deprecated-use-new_module-instead","text":"ID : deprecated_cmake_module Severity : warning Explanation : Some CMake modules have been provided by cmake_modules in the past, but are now provided by the system package or CMake itself. Please upgrade your CMakeLists.txt to ensure compatibility with future catkin versions.","title":"CMake module 'old_module' is deprecated, use 'new_module' instead"},{"location":"messages/#os-error-msg","text":"ID : os_error Severity : error Explanation : An operating system error has occured. This is not a linting problem per se but might be caused by a missing or unreadable file.","title":"OS error: msg"},{"location":"messages/#call-to-find_packagepkg-shadows-previously-selected-components","text":"ID : shadowed_find Severity : error Explanation : You have more than one find_package() call for a package, and the COMPONENTS list of the later call does not include a previously chosen component.","title":"call to find_package(pkg) shadows previously selected components"},{"location":"messages/#catkin_metapackage-in-regular-package","text":"ID : wrong_catkin_metapackage Severity : error Explanation : The catkin_metapackage() command signals your intent to declare a meta package, but the package.xml does not contain a tag.","title":"catkin_metapackage() in regular package"},{"location":"messages/#catkin_package-dependency-pkg-belongs-in-catkin_depends","text":"ID : catkin_as_system_depend Severity : error Explanation : In your catkin_package() call, you have listed a catkin package in the DEPENDS stanza, but it belongs in the CATKIN_DEPENDS stanza instead.","title":"catkin_package() dependency 'pkg' belongs in CATKIN_DEPENDS"},{"location":"messages/#catkin_package-dependency-pkg-belongs-in-depends","text":"ID : system_as_catkin_depend Severity : error Explanation : In your catkin_package() call, you have listed a system dependency in the CATKIN_DEPENDS stanza, but it belongs in the DEPENDS stanza instead.","title":"catkin_package() dependency 'pkg' belongs in DEPENDS"},{"location":"messages/#catkin_package-dependency-pkg-is-not-configured-properly","text":"ID : unconfigured_system_depend Severity : error Explanation : In order to export a system package as dependency, you must either call find_package( pkg ) first or initialize the pkg _INCLUDE_DIRS and pkg _LIBRARIES variables manually.","title":"catkin_package() dependency 'pkg' is not configured properly"},{"location":"messages/#catkin_package-exports-non-package-include-path","text":"ID : external_include_path Severity : error Explanation : You listed one or more include paths in the INCLUDE_DIRS stanza of your catkin_package() call which are not part of your package. If you want to export include paths of other modules, use find_package() , find_path() , and/or find_library() and add the dependency to the DEPENDS stanza.","title":"catkin_package() exports non-package include path"},{"location":"messages/#catkin_package-exports-package-include-path-that-is-not-installed","text":"ID : uninstalled_include_path Severity : error, warning Explanation : Your package can be used from the devel space but cannot be installed properly, because the header files will not be copied to the proper location.","title":"catkin_package() exports package include path that is not installed"},{"location":"messages/#catkin_package-exports-pkg-config-module-pkg","text":"ID : exported_pkg_config Severity : error Explanation : Although CMake can invoke pkg-config to detect other modules, this does not work well with catkin, as pkg-config may require you to add link directories. Use the results of pkg_check_module() as hint for find_path() and find_library() instead.","title":"catkin_package() exports pkg-config module 'pkg'"},{"location":"messages/#catkin_package-in-meta-package","text":"ID : wrong_catkin_package Severity : error Explanation : Meta packages use the catkin_metapackage() command to declare a meta package. This performs additional checks and ensures that all requirements are met.","title":"catkin_package() in meta package"},{"location":"messages/#condition-cond-is-ambiguous","text":"ID : ambiguous_condition Severity : warning Explanation : Historically, the if() command will interpret a single token as a variable name and transparently resolve it if possible. Unquoted variable references like if(${var}) can lead to incorrect results if ${var} resolves to a different variable name. Use if(var) or if(\"${var}\") instead.","title":"condition 'cond' is ambiguous"},{"location":"messages/#duplicate-cmd","text":"ID : duplicate_cmd Severity : error Explanation : You have called this command more than once, but this does not make sense. If the calls use different arguments, consolidate them into a single call, otherwise simply remove the second.","title":"duplicate cmd()"},{"location":"messages/#duplicate-find_packagepkg","text":"ID : duplicate_find Severity : warning Explanation : You called find_package() more than once for a particular package, which is not needed except for very specific, advanced circumstances.","title":"duplicate find_package(pkg)"},{"location":"messages/#duplicate-include-path-pkg_include_dirs","text":"ID : duplicate_include_path Severity : warning Explanation : Include paths of packages listed in the find_package(catkin) command are added implicitly by the ${catkin_INCLUDE_DIRS} variable. There is no need to add it a second time.","title":"duplicate include path ${pkg_INCLUDE_DIRS}"},{"location":"messages/#environment-variables-should-not-be-used","text":"ID : env_var Severity : warning Explanation : The behavior of your build should not depend on any environment variables.","title":"environment variables should not be used"},{"location":"messages/#executable-file-is-not-installed-to-bin-destination","text":"ID : wrong_bin_install_destination Severity : warning Explanation : Your package installs one or more files to an unexpected location. Executable files should end up in either ${CATKIN_GLOBAL_BIN_DESTINATION} or ${CATKIN_PACKAGE_BIN_DESTINATION}.","title":"executable file is not installed to bin destination"},{"location":"messages/#exported-include-path-path-does-not-exist","text":"ID : missing_include_path Severity : error Explanation : You have listed an invalid include path in the INCLUDE_DIRS stanza of the catkin_package() command.","title":"exported include path 'path' does not exist"},{"location":"messages/#exported-library-target-cannot-have-different-output-name","text":"ID : export_lib_renamed Severity : error Explanation : Due to a limitation of the catkin build system, the catkin_package() library export function will break if the logical target name is not equal to the actual library name.","title":"exported library 'target' cannot have different output name"},{"location":"messages/#exported-library-target-is-not-a-library","text":"ID : export_lib_not_lib Severity : error Explanation : You listed a library in the LIBRARIES stanza of your catkin_package() call, but it really is an executable.","title":"exported library 'target' is not a library"},{"location":"messages/#exported-library-target-is-not-installed","text":"ID : uninstalled_export_lib Severity : error, warning Explanation : Your package can be used from the devel space but cannot be installed properly, because a library that is exported via catkin_package() will not be copied to the proper location.","title":"exported library 'target' is not installed"},{"location":"messages/#exported-package-include-path-but-no-exported-library","text":"ID : missing_export_lib Severity : warning Explanation : Your package exports a package include path and builds at least one library, which suggests that you may want to export the library to other packages as well.","title":"exported package include path but no exported library"},{"location":"messages/#extra-arguments-in-cmd","text":"ID : endblock_args Severity : notice Explanation : The catkin manual recommends that cmd and other end-of-block statements have no arguments. If you have nested blocks, you should indent them properly instead.","title":"extra arguments in cmd()"},{"location":"messages/#file-script-is-executable-but-not-installed","text":"ID : uninstalled_script Severity : warning Explanation : Your package contains a file that is marked as executable but not installed. If it is a script intended to be run (e.g. with rosrun), it will not work outside the devel tree. If it is not an executable script, you should fix the file permissions.","title":"file 'script' is executable but not installed"},{"location":"messages/#file-setuppy-found-but-no-catkin_python_setup-call","text":"ID : missing_python_setup Severity : error Explanation : The catkin_python_setup() call is required to properly configure python modules, and the existing setup.py indicates that your package provides one or more python modules.","title":"file setup.py found but no catkin_python_setup() call"},{"location":"messages/#find_packagepkg-before-find_packagecmake_modules","text":"ID : missing_cmake_modules Severity : warning Explanation : You need to find_package() cmake_modules before you can use one of its custom configuration modules.","title":"find_package(pkg) before find_package(cmake_modules)"},{"location":"messages/#find_packagepkg-has-no-required-option","text":"ID : missing_required Severity : error, warning Explanation : The package cannot build without this dependency, so it should be marked as REQUIRED accordingly. Use if( pkg _FOUND) clauses to use optional packages.","title":"find_package(pkg) has no REQUIRED option"},{"location":"messages/#generate_messages-called-but-no-message-declared","text":"ID : unused_generate_msg Severity : warning Explanation : The generate_messages() call creates the messages, services, and actions which are declared in your package. If your package does not supply any of these, you do not have to call generate_messages() at all.","title":"generate_messages() called but no message declared"},{"location":"messages/#global-variable-var-should-contain-project-name","text":"ID : global_var_collision Severity : notice Explanation : Global variables and options are stored in the cache. You should prefix your variable names with the project name to avoid name collisions with other packages.","title":"global variable 'var' should contain project name"},{"location":"messages/#header-file-file-is-not-installed-to-package-specific-include-path","text":"ID : header_outside_package_include_path Severity : notice Explanation : It is recommend that all header files are installed into a package-specific include subdirectory to prevent file name collisions between different packages. The variable ${CATKIN_PACKAGE_INCLUDE_DESTINATION} will point to the correct location.","title":"header file 'file' is not installed to package-specific include path"},{"location":"messages/#include-path-path-is-exported-but-not-used-for-the-build","text":"ID : unused_include_path Severity : warning Explanation : You have listed an include path in the INCLUDE_DIRS stanza of the catkin_package() command, but that path is not mentioned in any include_directories() call.","title":"include path 'path' is exported but not used for the build"},{"location":"messages/#include-paths-path-and-parent_path-are-ambiguous","text":"ID : ambiguous_include_path Severity : warning Explanation : You have used two include paths where one is a parent of the other. Thus the same headers can be included with two different include paths which may confuse users. It is recommended that you keep your include paths consistent.","title":"include paths 'path' and 'parent_path' are ambiguous"},{"location":"messages/#installtype-dest-does-not-install-to-catkin_install_prefix","text":"ID : wrong_install_destination Severity : warning Explanation : Your package installs one or more files to an unexpected location. Catkin provides a number of standard variables ${CATKIN_*_DESTINATION} to specify installation folders. You should use those to ensure that your package will continue to work if the file system layout is changed in the future.","title":"install(type ... dest) does not install to ${CATKIN_INSTALL_PREFIX}"},{"location":"messages/#launch-configuration-needs-type_depend-on-pkg","text":"ID : launch_depend Severity : warning Explanation : Your package refers to another package in one of its launch files, but you do not have this dependency in your package.xml","title":"launch configuration needs type_depend on 'pkg'"},{"location":"messages/#library-output-name-output-has-redundant-lib-prefix","text":"ID : redundant_lib_prefix Severity : notice Explanation : Libraries are automatically prefixed with 'lib', so your library will end up with a file name like 'lib output .so'. You can use set_target_properties(... PROPERTIES OUTPUT_NAME ...) to give your library a different file name without changing the target name.","title":"library output name 'output' has redundant 'lib' prefix"},{"location":"messages/#line-is-not-indented-properly","text":"ID : indentation Severity : notice Explanation : For better readability, each command should be placed on its own line. if() and foreach() bodies should be indented by one or more extra spaces.","title":"line is not indented properly"},{"location":"messages/#link_directories-must-not-be-used-for-system-depends","text":"ID : external_link_directory Severity : error Explanation : Directories which are added to the search path with link_directories() will not be propagated to dependent packages. Use find_package() or find_library() with the appropriate PATHS or HINTS instead.","title":"link_directories() must not be used for system depends"},{"location":"messages/#list-name-should-be-sorted","text":"ID : unsorted_list Severity : notice Explanation : The catkin manual recommends that list element be kept in order.","title":"list name should be sorted"},{"location":"messages/#malformed-argument-list-msg","text":"ID : argument_error Severity : warning Explanation : You invoked a CMake command with a malformed argument list. Most likely, you forgot to properly quote variables which may be empty or undefined.","title":"malformed argument list: msg"},{"location":"messages/#meaningless-package-description-text","text":"ID : description_meaningless Severity : notice Explanation : Your package description merely consists of typical filler words which do not actually describe the contents of your package in a meaningful way.","title":"meaningless package description 'text'"},{"location":"messages/#meta-packages-must-not-have-type_depends","text":"ID : invalid_meta_depend Severity : error Explanation : Meta packages do not contain code or data and are merely dependency lists. As meta packages do neither build nor test anything, the only valid dependency type is the run_depend.","title":"meta packages must not have type_depends"},{"location":"messages/#misconfigured-catkin-package-pkg","text":"ID : misconfigured_catkin_package Severity : error Explanation : You use an unsupported way to include a catkin package in your build. Even though this might work in your particular case, you should use the proper find_package() mechanism to make sure that all relevant CMake macros will be run.","title":"misconfigured catkin package 'pkg'"},{"location":"messages/#missing-cmd","text":"ID : missing_cmd Severity : error Explanation : You failed to call a command that is required for your package to work. Please refer to the catkin build manual for details.","title":"missing cmd()"},{"location":"messages/#missing-type_depend-on-pkg","text":"ID : missing_depend Severity : error Explanation : Your package uses features of another package but you failed to list this dependency in your package.xml","title":"missing type_depend on 'pkg'"},{"location":"messages/#missing-components-keyword-before-pkg","text":"ID : missing_components Severity : notice Explanation : The find_package(catkin) call can add other catkin packages as dependencies with the COMPONENTS keyword. The find_package() command lists additional packages but has no COMPONENTS keyword.","title":"missing COMPONENTS keyword before 'pkg'"},{"location":"messages/#missing-find_packagepkg","text":"ID : missing_find Severity : error Explanation : You failed to call find_package() for a dependency of your package.","title":"missing find_package(pkg)"},{"location":"messages/#missing-generate_messages","text":"ID : missing_generate_msg Severity : error Explanation : The generate_messages() call creates the messages, services, and actions which are declared in your package by add_message_files() , add_service_files() , and add_action_files() respectively.","title":"missing generate_messages()"},{"location":"messages/#missing-include_directoriescatkin_include_dirs","text":"ID : unused_catkin_include_dirs Severity : error Explanation : You must add the catkin include paths to your include search list, or you might experience build failures.","title":"missing include_directories(${catkin_INCLUDE_DIRS})"},{"location":"messages/#operands-for-operator-op-should-be-quoted-strings","text":"ID : unquoted_string_op Severity : notice Explanation : The catkin manual recommends that if() conditions with string operators should have the operands enclosed in double quotes.","title":"operands for operator op should be quoted strings"},{"location":"messages/#package-pkg-must-be-in-catkin_depends-in-catkin_package","text":"ID : missing_catkin_depend Severity : error Explanation : You have a runtime dependency that you must add to the CATKIN_DEPENDS stanza of your catkin_package() .","title":"package 'pkg' must be in CATKIN_DEPENDS in catkin_package()"},{"location":"messages/#package-description-starts-with-boilerplate-text","text":"ID : description_boilerplate Severity : notice Explanation : Your package description starts with a number of typical filler words which do not actually describe the contents of your package. Typically, you can simply delete these words from the description, and it will still make sense and be much more concise.","title":"package description starts with boilerplate 'text'"},{"location":"messages/#package-exports-export-plugin-but-does-not-type_depend-on-pkg","text":"ID : plugin_depend Severity : warning Explanation : Your package exports a plugin for another package, but fails to list said package as a dependency.","title":"package exports export plugin but does not type_depend on 'pkg'"},{"location":"messages/#package-path-name-path-differs-from-package-name","text":"ID : package_path_name Severity : notice Explanation : Your package resides in a folder that has a different name than the package itself. This is confusing and might break the assumptions of some tools.","title":"package path name 'path' differs from package name"},{"location":"messages/#parse-error-msg","text":"ID : parse_error Severity : warning Explanation : Your package has a malformed file that could not be processed for linting.","title":"parse error: msg"},{"location":"messages/#project-name-name-differs-from-package-name","text":"ID : project_name Severity : error Explanation : The CMake project name must be identical to the package name. For backwards compatibility reasons, both names should also be identical to the name of the source folder that contains the package.","title":"project name 'name' differs from package name"},{"location":"messages/#referenced-target-target-is-not-defined","text":"ID : undefined_target Severity : error Explanation : Your package installs or exports a CMake target which is not defined at all. This could be a typo, or the target is implicitly defined by a macro that is unknown to catkin_lint .","title":"referenced target 'target' is not defined"},{"location":"messages/#script-file-has-no-interpreter-shebang-line","text":"ID : missing_shebang Severity : error Explanation : All interpreter scripts need an appropriate shebang line, i.e. the first line has to start with '#!' and needs to name the full path to the interpreter executable.","title":"script 'file' has no interpreter shebang line"},{"location":"messages/#script-script-must-be-executable","text":"ID : script_not_executable Severity : error Explanation : Your package contains a script file that has to be marked as executable. On Un*x systems, run 'chmod +x \" script \"' to set the executable bit.","title":"script 'script' must be executable"},{"location":"messages/#subdirectory-subdir-contains-a-subproject","text":"ID : subproject Severity : warning Explanation : Your package has an independent subproject. This can interact with catkin in unusual ways and is strongly discouraged. No further checks are performed in this subdirectory.","title":"subdirectory 'subdir' contains a subproject"},{"location":"messages/#subdirectory-subdir-is-added-a-second-time","text":"ID : duplicate_subdir Severity : error Explanation : You added another subdirectory with add_subdirectory() multiple times. This can also happen if you accidentally created a loop where subdir A adds subdir B, which adds subdir A again.","title":"subdirectory 'subdir' is added a second time"},{"location":"messages/#subdirectory-subdir-is-missing","text":"ID : missing_subdir Severity : error Explanation : You specified a subdirectory which does not exists or is unreadable.","title":"subdirectory 'subdir' is missing"},{"location":"messages/#subdirectory-subdir-is-not-in-package","text":"ID : external_subdir Severity : error Explanation : You added another subdirectory with add_subdirectory() , but the specified path points outside of the package source directory.","title":"subdirectory subdir is not in package"},{"location":"messages/#support-for-cmake-versions-older-than-2812-is-deprecated","text":"ID : cmake_ancient Severity : warning Explanation : Starting with CMake 3.19, compatibility with ancient CMake versions has been deprecated and triggers a developer warning. Most likely, you are not actually depending on ancient CMake behavior and can bump the minimum required version without ill effects.","title":"support for CMake versions older than 2.8.12 is deprecated"},{"location":"messages/#target-export_target-depends-on-target-target-which-is-not-installed","text":"ID : uninstalled_depend Severity : error Explanation : Your package can be used from the devel space but cannot be installed properly, because one of your installed targets depends on a library from your package that is not installed as well.","title":"target 'export_target' depends on target 'target' which is not installed"},{"location":"messages/#target-target-has-invalid-characters-in-its-output-file-name","text":"ID : invalid_target_output Severity : error Explanation : The output file that your target is supposed to generate contains invalid characters in its name. You probably forget to call set_target_properties(... PROPERTIES OUTPUT_NAME ...)","title":"target 'target' has invalid characters in its output file name"},{"location":"messages/#target-target-is-not-installed","text":"ID : uninstalled_target Severity : warning Explanation : Your package can be used from the devel space but cannot be installed properly, because the build target will not be copied to the proper location.","title":"target 'target' is not installed"},{"location":"messages/#test_depend-pkg-used-without-ifcatkin_enable_testing","text":"ID : unguarded_test_depend Severity : error Explanation : You have used a test dependency without properly guarding it by a if(CATKIN_ENABLE_TESTING) block. You must add a proper build dependency if you wish to use this package even if tests are disabled.","title":"test_depend 'pkg' used without if(CATKIN_ENABLE_TESTING)"},{"location":"messages/#unconfigured-build_depend-on-pkg","text":"ID : unconfigured_build_depend Severity : error Explanation : You declare a build dependency on another package but neither call find_package() nor have it listed as catkin component in the find_package(catkin) call.","title":"unconfigured build_depend on 'pkg'"},{"location":"messages/#unconfigured-message-dependency-pkg","text":"ID : unconfigured_msg_depend Severity : error Explanation : Your messages depend on another package which is neither find_package() 'd nor listed as a component in the find_package(catkin) call.","title":"unconfigured message dependency 'pkg'"},{"location":"messages/#unknown-package-pkg","text":"ID : unknown_package Severity : error Explanation : You are referring to a package which seems to be neither a catkin package nor a known system dependency. You may have misspelled the name, or your rosdep database needs to be refreshed with \"rosdep update\".","title":"unknown package 'pkg'"},{"location":"messages/#unused-type_depend-on-pkg","text":"ID : unused_depend Severity : error Explanation : You have a listed a package dependency but do not appear to use any of the features it provides.","title":"unused type_depend on 'pkg'"},{"location":"messages/#use-project_name-instead-of-name","text":"ID : literal_project_name Severity : notice Explanation : The catkin manual recommends that you use the ${PROJECT_NAME} variable instead of the literal project name.","title":"use ${PROJECT_NAME} instead of 'name'"},{"location":"messages/#use-find_packagepkg-instead-of-includefindpkgcmake","text":"ID : find_by_include Severity : error Explanation : The FindXXX.cmake modules are intended to be included by the find_package() command.","title":"use find_package(pkg) instead of include(Findpkg.cmake)"},{"location":"messages/#use-of-link_directories-is-strongly-discouraged","text":"ID : link_directory Severity : warning Explanation : Directories which are added to the search path with link_directories() will not be propagated to dependent packages. You should avoid this command or at least be aware that it might not work as expected in dependent packages.","title":"use of link_directories() is strongly discouraged"},{"location":"messages/#variable-var-is-modified","text":"ID : critical_var_append Severity : warning Explanation : You have appended extra data to a critical CMake variable. This might break the build on different systems or affect the global catkin workspace in unintended ways.","title":"variable var is modified"},{"location":"messages/#variable-var-is-modified_1","text":"ID : immutable_var Severity : error Explanation : You have modified a CMake variable that is initialized by CMake itself and must not be modified under any circumstances.","title":"variable var is modified"},{"location":"messages/#variable-var-is-overwritten","text":"ID : critical_var_overwrite Severity : error Explanation : You have overwritten a critical CMake variable and its original content is lost. This will most likely break the build on different systems or affect the global catkin workspace in unintended ways.","title":"variable var is overwritten"},{"location":"messages/#variable-cmake_build_type-is-overwritten-unconditionally","text":"ID : cmake_build_type Severity : error Explanation : If you wish to provide a default value for CMAKE_BUILD_TYPE, make sure that you do not overwrite user preferences. You should guard the set() command with an appropriate if(NOT CMAKE_BUILD_TYPE) block.","title":"variable CMAKE_BUILD_TYPE is overwritten unconditionally"},{"location":"usage/","text":"Usage catkin_lint is a command-line tool. You can invoke it manually or as part of a script. Synopsis catkin_lint [ --config FILE ] [ --quiet | --no-quiet ] [ --severity-level LEVEL ] [ --notice ID ] [ --warning ID ] [ --error ID ] [ --ignore ID ] [ --show-ignored ] [ --strict | --no-strict ] [ --pkg PKG ] [ --skip-pkg PKG ] [ --package-path PATH ] [ --skip-path MATCH ] [ --rosdistro DISTRO ] [ --offline ] [ --no-offline ] [ --rosdep-cache-path PATH ] [ --resolve-env | --no-resolve-env ] [ --output FORMAT | --text | --explain | --xml | --json ] [ --color MODE ] [ PATH [ PATH ...]] Options --config FILE Read configuration settings from FILE . This option can be used multiple times. --quiet , -q Suppress all outputs expect for the detected problems, in particular, do not show the summary at the end. --no-quiet Show a summary of the findings at the end. This is the default setting. --severity-level LEVEL , -W LEVEL Choose the severity level for diagnostic output. Level 0 displays errors only, level 1 displays errors and warnings, and level 2 displays everything. The default setting is -W1 . --notice ID , --warning ID , --error ID Override the default severity of certain problems --ignore ID Ignore a problem . This is mostly useful to work around a known bug in catkin_lint , because problems tend to not go away if you ignore them. --show-ignored Show all problems you ignored. Use this if an ignored problem did not go away, but you forgot which one. --strict Treat any reported problem as a fatal error. Some people use the option to enforce that warnings get fixed, too. You can also combine this with -W2 to turn even notices into errors, if you are exceptionally pedantic and/or have a high pain tolerance. --no-strict This will undo the effects of your rash decision to put strict=yes in your configuration file. This is also the default setting. --pkg PKG Check the package PKG for problems. The package must be in the ROS package search path. --skip-pkg PKG Skip the package PKG when processing a package subtree. The package will not be linted, but it will be treated as a known package for dependency resolutions. --package-path PATH [: PATH [...]] Add one or more additional locations to the ROS package search path. Separate multiple locations with : . catkin_lint will use this path list and the ROS_PACKAGE_PATH environment variable to resolve the --pkg option and dependencies of linted packages. --skip-path MATCH Skip packages if their location contains MATCH . No wildcards or pattern matching allowed, only proper substrings are recognized. --rosdistro DISTRO Assume that all packages are supposed to work with the ROS distribution DISTRO . By default, this value is taken from the ROS_DISTRO environment variable. catkin_lint will use this to query the ROS database for packages which are not locally installed. --offline Forbid metadata queries to the ROS package index. This will disable certain diagnostics which rely on knowing details about all package dependencies. Metadata queries are not needed for packages which can be found locally through the ROS package search path. --no-offline Allow metadata queries to the ROS package index. This is the default. --rosdep-cache-path PATH Override the default location of the rosdep sources cache. This option has the same effect as setting the ROSDEP_CACHE_PATH environment variable. --resolve-env Resolve environment variables $ENV{} in CMake scripts. By default, catkin_lint will treat all environment variables like empty strings and issue a warning. --no-resolve-env Do not resolve environment variables $ENV{} in CMake scripts and issue a warning if they are used. This is the default. --output FORMAT Select the output format for the diagnosed problems. Valid formats are text , explain , json , and xml . --text , --explain , --json , --xml These are deprecated aliases for --output FORMAT . --color MODE Configure the colorization of the text and explain output formats. The default mode is auto , which will use ANSI colors if catkin_lint detects a terminal as output. The modes always and never will override the detection and output ANSI colors always or never, respectively. Output Formats catkin_lint supports a variety of output formats as argument for the --output option: text This is the default format, which outputs a short, human-readable description of all problems. explain This is an extended text format, which will show an additional explanation when a problem type occurs for the first time. It will also mention the message ID which you need to change the severity or ignore a problem. json Outputs all problems in JSON format. xml Outputs all problems in XML format. Environment catkin_lint uses ROS_PACKAGE_PATH to find locally available packages and ROS_DISTRO to determine the installed ROS distribution when querying the ROS package index or the rosdep database. All other environment variables will be ignored, unless catkin_lint is instructed to resolve them in CMake scripts by --resolve-env . Return Values 0 All packages were linted successfully and no errors occurred. 1 An error occurred. 66 No packages found. Configuration File Format catkin_lint will look for configuration options in the following files: Files explicitly specified using --config .catkin_lint files in all locations from ROS_PACKAGE_PATH $XDG_CONFIG_HOME/catkin_lint ~/.config/catkin_lint if XDG_CONFIG_HOME is unset or empty ~/.catkin_lint catkin_lint will read all available configuration files and merge them into a single configuration. Earlier entries in the above list will take precedence if conflicting options are found. Command line arguments will override any configuration file setting. Configuration files are in an INI-style format with one or more sections in it. [catkin_lint] section The main section is called [catkin_lint] and will take the following catkin_lint specific options: color = auto | never | always Determine output colorization mode. The default setting auto will enable colorization if and only if standard output is connected to terminal. The modes always and never will override the detection and output ANSI colors always or never, respectively. offline = no | yes Allow or forbid metadata queries to the ROS package index. This will disable certain diagnostics which rely on knowing details about all package dependencies. Metadata queries are not needed for packages which can be found locally through the ROS package search path. The default setting is no . output = text | explain | json | xml Select the output format for problem reports. The default setting is text . package_path = PATH [: PATH [...]] Prepend the specified _PATH_s to ROS_PACKAGE_PATH in order to find locally available packages and/or package dependencies. quiet = no | yes Select output verbosity. The default setting no allows catkin_lint to print some additional information to standard error, such as a final summary of all detected problems. resolve_env = no | yes Allow or forbid resolution of environment variables. The default setting no lets catkin_lint ignore environment variables and issue a warning whenever a CMake command references the environment using $ENV{} . rosdistro = DISTRO Assume that all packages are supposed to work with the ROS distribution DISTRO . By default, this value is taken from the ROS_DISTRO environment variable. catkin_lint will use this to query the ROS database for packages which are not locally installed. rosdep_cache_path = PATH Override the default location of the rosdep sources cache. This option has the same effect as setting the ROSDEP_CACHE_PATH environment variable. severity_level = 0 | 1 | 2 Choose the severity level for diagnostic output. Level 0 displays errors only, level 1 displays errors and warnings, and level 2 displays everything. The default setting is 1 . strict = no | yes In strict mode, catkin_lint will treat every reported problem as error and return with exit code 1. By default, warnings and notices are informational only. This setting is mostly interesting for automated test runs, where the exit code is evaluated. Note that ignored problems and everything hidden by the chosen severity_level will not be considered failures. Package-specific severity overrides All section names besides [catkin_lint] are interpreted as package names and will override the reported severities of problems . As a special case, the section [*] will apply to all packages. The overrides are specified in the format ID = Severity , where the severity can be one of ignore , error , warning , notice , or default . Unlike --strict , this gives you very fine-grained control over which problems are supposed to be fatal, so you are encouraged to integrate catkin_lint into your CI test pipeline and tune the settings in a way that fits your project. Examples Command line arguments catkin_lint ~/catkin_ws/src Check all packages in ~/catkin_ws/src for problems. catkin_lint --pkg foo --pkg bar Check the packages foo and bar for problems, assuming that they can be found in one of the locations listed in ROS_PACKAGE_PATH . catkin_lint --pkg foo --pkg bar --package-path ~/my_other_ws/src Check the packages foo and bar for problems when the former assumption turned out to be false. catkin_lint ~/catkin_ws/src --skip-path unstable Check all packages in ~/catkin_ws/src , but skip all packages in a path that contains the string unstable . catkin_lint ~/catkin_ws/src --skip-pkg baz Check all packages except baz in ~/catkin_ws/src . Configuration file The following configuration file will instruct catkin_lint to output its results in JSON format, ignore any problems with unknown packages (except in the package foo), and elevate the notice about unsorted lists to a warning for all packages (including foo): [catkin_lint] output = json quiet = yes [*] unknown_package = ignore unsorted_list = warning [foo] unknown_package = default","title":"Usage"},{"location":"usage/#usage","text":"catkin_lint is a command-line tool. You can invoke it manually or as part of a script.","title":"Usage"},{"location":"usage/#synopsis","text":"catkin_lint [ --config FILE ] [ --quiet | --no-quiet ] [ --severity-level LEVEL ] [ --notice ID ] [ --warning ID ] [ --error ID ] [ --ignore ID ] [ --show-ignored ] [ --strict | --no-strict ] [ --pkg PKG ] [ --skip-pkg PKG ] [ --package-path PATH ] [ --skip-path MATCH ] [ --rosdistro DISTRO ] [ --offline ] [ --no-offline ] [ --rosdep-cache-path PATH ] [ --resolve-env | --no-resolve-env ] [ --output FORMAT | --text | --explain | --xml | --json ] [ --color MODE ] [ PATH [ PATH ...]]","title":"Synopsis"},{"location":"usage/#options","text":"--config FILE Read configuration settings from FILE . This option can be used multiple times. --quiet , -q Suppress all outputs expect for the detected problems, in particular, do not show the summary at the end. --no-quiet Show a summary of the findings at the end. This is the default setting. --severity-level LEVEL , -W LEVEL Choose the severity level for diagnostic output. Level 0 displays errors only, level 1 displays errors and warnings, and level 2 displays everything. The default setting is -W1 . --notice ID , --warning ID , --error ID Override the default severity of certain problems --ignore ID Ignore a problem . This is mostly useful to work around a known bug in catkin_lint , because problems tend to not go away if you ignore them. --show-ignored Show all problems you ignored. Use this if an ignored problem did not go away, but you forgot which one. --strict Treat any reported problem as a fatal error. Some people use the option to enforce that warnings get fixed, too. You can also combine this with -W2 to turn even notices into errors, if you are exceptionally pedantic and/or have a high pain tolerance. --no-strict This will undo the effects of your rash decision to put strict=yes in your configuration file. This is also the default setting. --pkg PKG Check the package PKG for problems. The package must be in the ROS package search path. --skip-pkg PKG Skip the package PKG when processing a package subtree. The package will not be linted, but it will be treated as a known package for dependency resolutions. --package-path PATH [: PATH [...]] Add one or more additional locations to the ROS package search path. Separate multiple locations with : . catkin_lint will use this path list and the ROS_PACKAGE_PATH environment variable to resolve the --pkg option and dependencies of linted packages. --skip-path MATCH Skip packages if their location contains MATCH . No wildcards or pattern matching allowed, only proper substrings are recognized. --rosdistro DISTRO Assume that all packages are supposed to work with the ROS distribution DISTRO . By default, this value is taken from the ROS_DISTRO environment variable. catkin_lint will use this to query the ROS database for packages which are not locally installed. --offline Forbid metadata queries to the ROS package index. This will disable certain diagnostics which rely on knowing details about all package dependencies. Metadata queries are not needed for packages which can be found locally through the ROS package search path. --no-offline Allow metadata queries to the ROS package index. This is the default. --rosdep-cache-path PATH Override the default location of the rosdep sources cache. This option has the same effect as setting the ROSDEP_CACHE_PATH environment variable. --resolve-env Resolve environment variables $ENV{} in CMake scripts. By default, catkin_lint will treat all environment variables like empty strings and issue a warning. --no-resolve-env Do not resolve environment variables $ENV{} in CMake scripts and issue a warning if they are used. This is the default. --output FORMAT Select the output format for the diagnosed problems. Valid formats are text , explain , json , and xml . --text , --explain , --json , --xml These are deprecated aliases for --output FORMAT . --color MODE Configure the colorization of the text and explain output formats. The default mode is auto , which will use ANSI colors if catkin_lint detects a terminal as output. The modes always and never will override the detection and output ANSI colors always or never, respectively.","title":"Options"},{"location":"usage/#output-formats","text":"catkin_lint supports a variety of output formats as argument for the --output option: text This is the default format, which outputs a short, human-readable description of all problems. explain This is an extended text format, which will show an additional explanation when a problem type occurs for the first time. It will also mention the message ID which you need to change the severity or ignore a problem. json Outputs all problems in JSON format. xml Outputs all problems in XML format.","title":"Output Formats"},{"location":"usage/#environment","text":"catkin_lint uses ROS_PACKAGE_PATH to find locally available packages and ROS_DISTRO to determine the installed ROS distribution when querying the ROS package index or the rosdep database. All other environment variables will be ignored, unless catkin_lint is instructed to resolve them in CMake scripts by --resolve-env .","title":"Environment"},{"location":"usage/#return-values","text":"0 All packages were linted successfully and no errors occurred. 1 An error occurred. 66 No packages found.","title":"Return Values"},{"location":"usage/#configuration-file-format","text":"catkin_lint will look for configuration options in the following files: Files explicitly specified using --config .catkin_lint files in all locations from ROS_PACKAGE_PATH $XDG_CONFIG_HOME/catkin_lint ~/.config/catkin_lint if XDG_CONFIG_HOME is unset or empty ~/.catkin_lint catkin_lint will read all available configuration files and merge them into a single configuration. Earlier entries in the above list will take precedence if conflicting options are found. Command line arguments will override any configuration file setting. Configuration files are in an INI-style format with one or more sections in it.","title":"Configuration File Format"},{"location":"usage/#catkin_lint-section","text":"The main section is called [catkin_lint] and will take the following catkin_lint specific options: color = auto | never | always Determine output colorization mode. The default setting auto will enable colorization if and only if standard output is connected to terminal. The modes always and never will override the detection and output ANSI colors always or never, respectively. offline = no | yes Allow or forbid metadata queries to the ROS package index. This will disable certain diagnostics which rely on knowing details about all package dependencies. Metadata queries are not needed for packages which can be found locally through the ROS package search path. The default setting is no . output = text | explain | json | xml Select the output format for problem reports. The default setting is text . package_path = PATH [: PATH [...]] Prepend the specified _PATH_s to ROS_PACKAGE_PATH in order to find locally available packages and/or package dependencies. quiet = no | yes Select output verbosity. The default setting no allows catkin_lint to print some additional information to standard error, such as a final summary of all detected problems. resolve_env = no | yes Allow or forbid resolution of environment variables. The default setting no lets catkin_lint ignore environment variables and issue a warning whenever a CMake command references the environment using $ENV{} . rosdistro = DISTRO Assume that all packages are supposed to work with the ROS distribution DISTRO . By default, this value is taken from the ROS_DISTRO environment variable. catkin_lint will use this to query the ROS database for packages which are not locally installed. rosdep_cache_path = PATH Override the default location of the rosdep sources cache. This option has the same effect as setting the ROSDEP_CACHE_PATH environment variable. severity_level = 0 | 1 | 2 Choose the severity level for diagnostic output. Level 0 displays errors only, level 1 displays errors and warnings, and level 2 displays everything. The default setting is 1 . strict = no | yes In strict mode, catkin_lint will treat every reported problem as error and return with exit code 1. By default, warnings and notices are informational only. This setting is mostly interesting for automated test runs, where the exit code is evaluated. Note that ignored problems and everything hidden by the chosen severity_level will not be considered failures.","title":"\u000291\u0003catkin\u000295\u0003lint\u000293\u0003 section"},{"location":"usage/#package-specific-severity-overrides","text":"All section names besides [catkin_lint] are interpreted as package names and will override the reported severities of problems . As a special case, the section [*] will apply to all packages. The overrides are specified in the format ID = Severity , where the severity can be one of ignore , error , warning , notice , or default . Unlike --strict , this gives you very fine-grained control over which problems are supposed to be fatal, so you are encouraged to integrate catkin_lint into your CI test pipeline and tune the settings in a way that fits your project.","title":"Package-specific severity overrides"},{"location":"usage/#examples","text":"","title":"Examples"},{"location":"usage/#command-line-arguments","text":"catkin_lint ~/catkin_ws/src Check all packages in ~/catkin_ws/src for problems. catkin_lint --pkg foo --pkg bar Check the packages foo and bar for problems, assuming that they can be found in one of the locations listed in ROS_PACKAGE_PATH . catkin_lint --pkg foo --pkg bar --package-path ~/my_other_ws/src Check the packages foo and bar for problems when the former assumption turned out to be false. catkin_lint ~/catkin_ws/src --skip-path unstable Check all packages in ~/catkin_ws/src , but skip all packages in a path that contains the string unstable . catkin_lint ~/catkin_ws/src --skip-pkg baz Check all packages except baz in ~/catkin_ws/src .","title":"Command line arguments"},{"location":"usage/#configuration-file","text":"The following configuration file will instruct catkin_lint to output its results in JSON format, ignore any problems with unknown packages (except in the package foo), and elevate the notice about unsorted lists to a warning for all packages (including foo): [catkin_lint] output = json quiet = yes [*] unknown_package = ignore unsorted_list = warning [foo] unknown_package = default","title":"Configuration file"}]}